diff -rNu yaml-cpp/include/yaml-cpp/node/detail/fake_map.h yaml-cpp.no-boost/include/yaml-cpp/node/detail/fake_map.h
--- yaml-cpp/include/yaml-cpp/node/detail/fake_map.h	1969-12-31 21:00:00.000000000 -0300
+++ yaml-cpp.no-boost/include/yaml-cpp/node/detail/fake_map.h	2015-01-22 19:26:01.000000000 -0200
@@ -0,0 +1,73 @@
+/* 
+ * A deque that masquerades as a map. Ugly hack to make sure we
+ * iterate over YAML maps in insertion order.
+ *
+ * (c) 2015 Wouter Caarls
+ */
+
+#ifndef FAKE_MAP_H_
+#define FAKE_MAP_H_
+
+#include <deque>
+
+template<class key_type, class mapped_value>
+class fake_map
+{
+  public:
+    typedef std::pair<key_type, mapped_value> Item;
+    typedef std::deque<Item> ItemQueue;
+    
+    typedef typename ItemQueue::iterator iterator;
+    typedef typename ItemQueue::const_iterator const_iterator;
+
+  protected:
+    ItemQueue queue_;
+
+  public:
+    size_t size() const
+    {
+      return queue_.size();
+    }
+  
+    mapped_value& operator[] (const key_type& k)
+    {
+      for (typename ItemQueue::iterator it=queue_.begin(); it != queue_.end(); ++it)
+        if (it->first == k)
+          return it->second;
+      
+      queue_.push_back(Item(k, mapped_value()));
+      return queue_.back().second;
+    }
+    
+    void erase(const iterator position)
+    {
+      queue_.erase(position);
+    }
+    
+    void clear()
+    {
+      queue_.clear();
+    }
+  
+    iterator begin()
+    {
+      return queue_.begin();
+    }
+    
+    const_iterator begin() const
+    {
+      return queue_.begin();
+    }
+    
+    iterator end()
+    {
+      return queue_.end();
+    }
+    
+    const_iterator end() const
+    {
+      return queue_.end();
+    }
+};
+
+#endif /* FAKE_MAP_H */
diff -rNu yaml-cpp/include/yaml-cpp/node/detail/node_data.h yaml-cpp.no-boost/include/yaml-cpp/node/detail/node_data.h
--- yaml-cpp/include/yaml-cpp/node/detail/node_data.h	2015-08-31 11:35:29.229906079 -0300
+++ yaml-cpp.no-boost/include/yaml-cpp/node/detail/node_data.h	2015-08-31 11:01:06.349906325 -0300
@@ -18,6 +18,7 @@
 #include "yaml-cpp/node/iterator.h"
 #include "yaml-cpp/node/ptr.h"
 #include "yaml-cpp/node/type.h"
+#include "yaml-cpp/node/detail/fake_map.h"
 
 namespace YAML {
 namespace detail {
@@ -114,7 +115,7 @@
   mutable std::size_t m_seqSize;
 
   // map
-  typedef std::map<node*, node*> node_map;
+  typedef fake_map<node*, node*> node_map;
   node_map m_map;
 
   typedef std::pair<node*, node*> kv_pair;
diff -rNu yaml-cpp/include/yaml-cpp/node/detail/node_iterator.h yaml-cpp.no-boost/include/yaml-cpp/node/detail/node_iterator.h
--- yaml-cpp/include/yaml-cpp/node/detail/node_iterator.h	2015-08-31 11:35:29.229906079 -0300
+++ yaml-cpp.no-boost/include/yaml-cpp/node/detail/node_iterator.h	2015-08-31 11:01:33.733906322 -0300
@@ -9,6 +9,7 @@
 
 #include "yaml-cpp/dll.h"
 #include "yaml-cpp/node/ptr.h"
+#include "yaml-cpp/node/detail/fake_map.h"
 #include <iterator>
 #include <memory>
 #include <map>
@@ -37,7 +38,7 @@
 };
 
 typedef std::vector<node*> node_seq;
-typedef std::map<node*, node*> node_map;
+typedef fake_map<node*, node*> node_map;
 
 template <typename V>
 struct node_iterator_type {
